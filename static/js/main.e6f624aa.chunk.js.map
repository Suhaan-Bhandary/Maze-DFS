{"version":3,"sources":["MazeGeneratorVisualizer/Node/Node.jsx","algorithms/dfsRecursive.js","algorithms/dijkstra.js","MazeGeneratorVisualizer/MazeGeneratorVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isFinish","isStart","onMouseDown","onMouseUp","extraClassName","style","topBorder","id","className","Component","move","current","grid","nodeStack","startNode","endNode","visitedNodesInOrder","push","isVisited","kids","getKids","length","pop","node","Math","floor","random","previousNode","bottomWall","topWall","rightWall","leftWall","filter","kid","dijkstra","newGrid","newStartNode","newEndNode","console","log","forEach","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","getNodesInShortestPathOrder","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","parent","neighbor","getUnvisitedNeighbors","finishNode","nodesInShortestPathOrder","currentNode","unshift","PathfindingVisualizer","componentDidMount","getGrid","points","start","finish","setState","visualizeMazeGeneration","phase","dfsRecursive","animateMazeGeneration","animateShortestPath","i","setTimeout","j","document","getElementById","classList","add","shortestPath","remove","nodeElement","pointChangeHandler","notCorrectProperty","errorMessage","start_row","parseInt","value","start_col","finish_row","finish_col","speedChangeHandler","changedSpeed","mazeGenerationSpeed","lengthChangeHandler","row_length","col_length","animationStateChangeHandler","animationState","window","screen","width","dragNode","contains","buttonContainer","animationStateChangerButton","onClick","color","backgroundColor","height","border","exportPdf","actionContainer","htmlFor","type","min","max","name","onChange","defaultValue","href","target","toggleMenu","map","rowIndex","nodeIndex","handleMouseDown","handleMouseUp","currentRow","createNode","row_max_length","col_max_length","isNaN","querySelector","toggle","element","table","rows","cell","cells","html2canvas","then","canvas","imgData","toDataURL","doc","jspdf","imgHeight","text","addImage","save","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e6f624aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n\r\n      isFinish,\r\n      isStart,\r\n\r\n      onMouseDown,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    let styles = {\r\n      topBorder: null,\r\n    };\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : \"\";\r\n\r\n    return (\r\n      <td\r\n        style={styles}\r\n        id={`node-${row}-${col}`}\r\n        className={`node dimension ${extraClassName}`}\r\n\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n","export function dfsRecursive(grid, startNode, endNode) {\r\n  let visitedNodesInOrder = [];\r\n  let nodeStack = [];\r\n\r\n  move(startNode, grid, nodeStack, startNode, endNode, visitedNodesInOrder);\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nconst move = (\r\n  current,\r\n  grid,\r\n  nodeStack,\r\n  startNode,\r\n  endNode,\r\n  visitedNodesInOrder\r\n) => {\r\n  visitedNodesInOrder.push(current);\r\n  current.isVisited = true;\r\n\r\n  let kids = getKids(current, grid);\r\n\r\n  if (kids.length === 0) {\r\n    if (nodeStack.length === 0) return;\r\n    current = nodeStack.pop();\r\n  } else {\r\n    let node = kids[Math.floor(Math.random() * kids.length)];\r\n\r\n    node.previousNode = current;\r\n\r\n    if (current.col === node.col) {\r\n      if (current.row < node.row) {\r\n        grid[current.row][current.col].bottomWall = false;\r\n        grid[node.row][node.col].topWall = false;\r\n      } else {\r\n        grid[current.row][current.col].topWall = false;\r\n        grid[node.row][node.col].bottomWall = false;\r\n      }\r\n    } else {\r\n      if (current.col < node.col) {\r\n        grid[current.row][current.col].rightWall = false;\r\n        grid[node.row][node.col].leftWall = false;\r\n      } else {\r\n        grid[current.row][current.col].leftWall = false;\r\n        grid[node.row][node.col].rightWall = false;\r\n      }\r\n    }\r\n\r\n    current = node;\r\n    nodeStack.push(current);\r\n  }\r\n\r\n  move(current, grid, nodeStack, startNode, endNode, visitedNodesInOrder);\r\n};\r\n\r\nconst getKids = (current, grid) => {\r\n  let kids = [];\r\n  const row = current.row;\r\n  const col = current.col;\r\n\r\n  if (row > 0) kids.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) kids.push(grid[row + 1][col]);\r\n  if (col > 0) kids.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) kids.push(grid[row][col + 1]);\r\n\r\n  return kids.filter((kid) => !kid.isVisited);\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Implementing dijkstra algorithm.\r\n// Dijkstra is a weighted algorithm,weights are non-negative in this algorithm.\r\n\r\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  let newGrid = [...grid];\r\n  let newStartNode = newGrid[startNode.row][startNode.col];\r\n  let newEndNode = newGrid[endNode.row][endNode.col];\r\n\r\n  console.log(startNode.row, newGrid, newStartNode, newEndNode);\r\n\r\n  newGrid.forEach((row) => {\r\n    row.forEach((node) => {\r\n      node.isVisited = false;\r\n    });\r\n  });\r\n\r\n  const visitedNodesInOrder = []; // To animate visited nodes in order to animate the process of searching.\r\n  newStartNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(newGrid);\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) {\r\n      console.log(\"see this node :\", closestNode);\r\n      console.log(\"ohhh noooo\");\r\n      return [visitedNodesInOrder, []];\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    // Checking for the success condition.\r\n    if (closestNode === newEndNode) {\r\n      const shortestNodePath = getNodesInShortestPathOrder(newEndNode);\r\n      return [visitedNodesInOrder, shortestNodePath];\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, newGrid);\r\n  }\r\n}\r\n\r\n// Sorts the unvisitedNodes every time it is called.\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\n// Sets the neighbour nodes distance and also the previous node property.\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    // Now the neighbor distance is not infinity and because of it it will show among the top in unvisited nodes.\r\n    neighbor.previousNode = node; // With this property we can backtrack and find the shortest path between the start and end node.\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node; //col and row are properties of the node.\r\n\r\n  const parent = grid[row][col];\r\n\r\n  if (row > 0 && !parent.topWall) neighbors.push(grid[row - 1][col]); // left\r\n\r\n  if (row < grid.length - 1 && !parent.bottomWall)\r\n    neighbors.push(grid[row + 1][col]);\r\n\r\n  if (col > 0 && !parent.leftWall) neighbors.push(grid[row][col - 1]);\r\n\r\n  if (col < grid[0].length - 1 && !parent.rightWall)\r\n    neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited); // filtering the visited node\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n    console.log(\"ok\");\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport html2canvas from \"html2canvas\";\r\nimport jspdf from \"jspdf\";\r\n\r\nimport Node from \"./Node/Node.jsx\";\r\n\r\nimport {\r\n  dfsRecursive,\r\n  getNodesInShortestPathOrder,\r\n} from \"../algorithms/dfsRecursive.js\";\r\n\r\nimport { dijkstra } from \"../algorithms/dijkstra.js\";\r\n\r\nimport \"./MazeGeneratorVisualizer.css\";\r\n\r\nimport { VscSettings } from \"react-icons/vsc\";\r\nimport { GrYoutube } from \"react-icons/gr\";\r\nimport { FaLinkedin } from \"react-icons/fa\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { SiGmail } from \"react-icons/si\";\r\nimport { TiTickOutline } from \"react-icons/ti\";\r\nimport { ImCross } from \"react-icons/im\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    // USing this if else here beacause of the asyn nature\r\n    // and how the set is updated,which restricts allowance of accessing the state.\r\n    super(props);\r\n    if (window.screen.width < 500) {\r\n      this.state = {\r\n        grid: [],\r\n        errorMessage: \"\",\r\n        dragNode: \"normal\",\r\n        phase: \"preMaze\", // phases can be of three types : preMaze,Maze,postMaze\r\n        mazeGenerationSpeed: 10,\r\n        animationState: true,\r\n        points: {\r\n          start: {\r\n            row: 12,\r\n            col: 0,\r\n          },\r\n          finish: {\r\n            row: 12,\r\n            col: 9,\r\n          },\r\n        },\r\n        length: {\r\n          row: 26,\r\n          col: 10,\r\n        },\r\n      };\r\n    } else {\r\n      this.state = {\r\n        grid: [],\r\n        errorMessage: \"\",\r\n        dragNode: \"normal\",\r\n        phase: \"preMaze\", // phases can be of three types : preMaze,Maze,postMaze\r\n        mazeGenerationSpeed: 10,\r\n        animationState: true,\r\n        points: {\r\n          start: {\r\n            row: 12,\r\n            col: 0,\r\n          },\r\n          finish: {\r\n            row: 12,\r\n            col: 49,\r\n          },\r\n        },\r\n        length: {\r\n          row: 27,\r\n          col: 50,\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  // Creating grid\r\n  componentDidMount = () => {\r\n    const grid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n      this.state.points.start.row,\r\n      this.state.points.start.col,\r\n      this.state.points.finish.row,\r\n      this.state.points.finish.col\r\n    );\r\n    this.setState({\r\n      grid,\r\n    });\r\n  };\r\n\r\n  visualizeMazeGeneration = () => {\r\n    this.setState({ phase: \"Maze\" });\r\n    const { grid } = this.state;\r\n    const startNode =\r\n      grid[this.state.points.start.row][this.state.points.start.col];\r\n    const finishNode =\r\n      grid[this.state.points.finish.row][this.state.points.finish.col];\r\n\r\n    const visitedNodesInOrder = dfsRecursive(grid, startNode, finishNode);\r\n    // const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    this.animateMazeGeneration(visitedNodesInOrder, grid);\r\n  };\r\n\r\n  animateMazeGeneration(visitedNodesInOrder, grid) {\r\n    if (this.state.animationState) {\r\n      for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n        setTimeout(() => {\r\n          if (i === visitedNodesInOrder.length - 1) {\r\n            this.setState({ phase: \"postMaze\" });\r\n            this.setState({\r\n              grid: grid,\r\n            });\r\n          }\r\n\r\n          const node = visitedNodesInOrder[i];\r\n          const nodeElement = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          );\r\n\r\n          nodeElement.classList.remove(\"node\");\r\n\r\n          if (nodeElement.classList.contains(\"node-finish\")) {\r\n            console.log(\"Finish\");\r\n          } else if (nodeElement.classList.contains(\"node-start\")) {\r\n            console.log(\"Finish\");\r\n          } else if (nodeElement.classList.contains(\"node-visited\")) {\r\n            nodeElement.classList.remove(\"node-visited\");\r\n            nodeElement.classList.add(\"RevisitedNode\");\r\n          } else {\r\n            nodeElement.classList.add(\"node-visited\"); // Initializing if not visited yet.\r\n          }\r\n\r\n          if (node.topWall) {\r\n            nodeElement.classList.add(\"topWall\");\r\n          }\r\n          if (node.rightWall) {\r\n            nodeElement.classList.add(\"rightWall\");\r\n          }\r\n          if (node.bottomWall) {\r\n            nodeElement.classList.add(\"bottomWall\");\r\n          }\r\n          if (node.leftWall) {\r\n            nodeElement.classList.add(\"leftWall\");\r\n          }\r\n        }, (300 * i) / this.state.mazeGenerationSpeed);\r\n      }\r\n    } else {\r\n      for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n        if (i === visitedNodesInOrder.length - 1) {\r\n          this.setState({ phase: \"postMaze\" });\r\n          this.setState({\r\n            grid: grid,\r\n          });\r\n        }\r\n\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        );\r\n\r\n        nodeElement.classList.remove(\"node\");\r\n\r\n        if (nodeElement.classList.contains(\"node-finish\")) {\r\n          console.log(\"Finish\");\r\n        } else if (nodeElement.classList.contains(\"node-start\")) {\r\n          console.log(\"Finish\");\r\n        } else if (nodeElement.classList.contains(\"node-visited\")) {\r\n          nodeElement.classList.remove(\"node-visited\");\r\n          nodeElement.classList.add(\"RevisitedNode\");\r\n        } else {\r\n          nodeElement.classList.add(\"node-visited\"); // Initializing if not visited yet.\r\n        }\r\n\r\n        if (node.topWall) {\r\n          nodeElement.classList.add(\"topWall\");\r\n        }\r\n        if (node.rightWall) {\r\n          nodeElement.classList.add(\"rightWall\");\r\n        }\r\n        if (node.bottomWall) {\r\n          nodeElement.classList.add(\"bottomWall\");\r\n        }\r\n        if (node.leftWall) {\r\n          nodeElement.classList.add(\"leftWall\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Use to get or visualize the shortest path.\r\n  animateShortestPath = () => {\r\n    // const finishNode = this.state.grid[this.state.points.finish.row][\r\n    //   this.state.points.finish.col\r\n    // ];\r\n    // const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    const startNode =\r\n      this.state.grid[this.state.points.start.row][this.state.points.start.col];\r\n\r\n    const finishNode =\r\n      this.state.grid[this.state.points.finish.row][\r\n        this.state.points.finish.col\r\n      ];\r\n\r\n    const [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\r\n      this.state.grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      // When we reach the last element in visitedNodesInOrder.\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n\r\n          for (let j = 1; j < nodesInShortestPathOrder.length - 1; j++) {\r\n            setTimeout(() => {\r\n              const node = nodesInShortestPathOrder[j];\r\n              document.getElementById(\r\n                `node-${node.row}-${node.col}`\r\n              ).classList.add(\"node-path\");\r\n              console.log(\"this is running\");\r\n            }, 50 * j);\r\n          }\r\n\r\n          let shortestPath = getNodesInShortestPathOrder(finishNode);\r\n          for (let j = 1; j < shortestPath.length - 1; j++) {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n\r\n              document.getElementById(\r\n                `node-${node.row}-${node.col}`\r\n              ).classList.remove(\"node-visited-dijkstra\");\r\n\r\n\r\n              document.getElementById(\r\n                `node-${node.row}-${node.col}`\r\n              ).classList.add(\"node-path-dfs\");\r\n\r\n              console.log(\"this is running\");\r\n            }, 50 * j);\r\n          }\r\n\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      if (i === visitedNodesInOrder.length - 1) continue;\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeElement = document.getElementById(`node-${node.row}-${node.col}`);\r\n        \r\n        nodeElement.classList.remove(\"node-visited\");\r\n        nodeElement.classList.remove(\"RevisitedNode\");\r\n        nodeElement.classList.add(\"node-visited-dijkstra\");\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  pointChangeHandler = () => {\r\n    if (notCorrectProperty(this.state.length.row, this.state.length.col)) {\r\n      this.setState({\r\n        errorMessage: \"Invalid Input\",\r\n      });\r\n      return;\r\n    } //To check if the provided value is suitable or not.\r\n\r\n    const start_row = parseInt(document.getElementById(\"start_row\").value);\r\n    const start_col = parseInt(document.getElementById(\"start_col\").value);\r\n    const finish_row = parseInt(document.getElementById(\"end_row\").value);\r\n    const finish_col = parseInt(document.getElementById(\"end_col\").value);\r\n\r\n    const newGrid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n\r\n      start_row,\r\n      start_col,\r\n      finish_row,\r\n      finish_col\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: start_row,\r\n          col: start_col,\r\n        },\r\n        finish: {\r\n          row: finish_row,\r\n          col: finish_col,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  speedChangeHandler = () => {\r\n    const changedSpeed = parseInt(\r\n      document.getElementById(\"mazeSpeedRange\").value\r\n    );\r\n    this.setState({\r\n      mazeGenerationSpeed: changedSpeed,\r\n    });\r\n  };\r\n\r\n  lengthChangeHandler = () => {\r\n    const row_length = document.getElementById(\"row_length\").value;\r\n    const col_length = document.getElementById(\"col_length\").value;\r\n\r\n    if (row_length > 50 || col_length > 50) {\r\n      this.setState({\r\n        errorMessage: \"Invalid Size\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Getting new grid.\r\n    const newGrid = getGrid(\r\n      row_length,\r\n      col_length,\r\n      0,\r\n      0,\r\n      row_length - 1,\r\n      col_length - 1\r\n    );\r\n\r\n    // Changing the new value of the input elements :\r\n    document.getElementById(\"start_row\").value = 0;\r\n    document.getElementById(\"start_col\").value = 0;\r\n    document.getElementById(\"end_row\").value = row_length - 1;\r\n    document.getElementById(\"end_col\").value = col_length - 1;\r\n\r\n    // Assing new values.\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: 0,\r\n          col: 0,\r\n        },\r\n        finish: {\r\n          row: row_length - 1,\r\n          col: col_length - 1,\r\n        },\r\n      },\r\n      length: {\r\n        row: row_length,\r\n        col: col_length,\r\n      },\r\n    });\r\n  };\r\n\r\n  animationStateChangeHandler = () => {\r\n    this.setState({ animationState: !this.state.animationState });\r\n  };\r\n\r\n  // On pressing the mouse down\r\n  handleMouseDown(row, col) {\r\n    if (this.state.phase !== \"preMaze\") {\r\n      console.log(\"this is premaze\");\r\n      return;\r\n    }\r\n\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({ dragNode: \"start\" });\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({ dragNode: \"finish\" });\r\n    } else {\r\n      this.setState({ dragNode: \"normal\" });\r\n    }\r\n  }\r\n\r\n  // When we release the mouse\r\n  handleMouseUp(row, col) {\r\n    // Check condition to see if the maze is running or not.\r\n    if (this.state.phase !== \"preMaze\") return;\r\n\r\n    let start_row = this.state.points.start.row;\r\n    let start_col = this.state.points.start.col;\r\n    let finish_row = this.state.points.finish.row;\r\n    let finish_col = this.state.points.finish.col;\r\n\r\n    // Changing the value of start and end not depending on the mouse drag\r\n    if (this.state.dragNode === \"start\") {\r\n      start_row = row;\r\n      start_col = col;\r\n    } else if (this.state.dragNode === \"finish\") {\r\n      finish_row = row;\r\n      finish_col = col;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    const newGrid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n\r\n      start_row,\r\n      start_col,\r\n      finish_row,\r\n      finish_col\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: start_row,\r\n          col: start_col,\r\n        },\r\n        finish: {\r\n          row: finish_row,\r\n          col: finish_col,\r\n        },\r\n      },\r\n    });\r\n\r\n    document.getElementById(\"start_row\").value = start_row;\r\n    document.getElementById(\"start_col\").value = start_col;\r\n    document.getElementById(\"end_row\").value = finish_row;\r\n    document.getElementById(\"end_col\").value = finish_col;\r\n  }\r\n\r\n  render() {\r\n    let buttonContainer = <p>System Error !!!</p>;\r\n\r\n    let animationStateChangerButton = (\r\n      <button\r\n        onClick={this.animationStateChangeHandler}\r\n        style={{\r\n          color: \"#fff\",\r\n          backgroundColor: \"#25D366\",\r\n          width: \"100px\",\r\n          height: \"30px\",\r\n          border: \"1px solid #fff\",\r\n        }}\r\n      >\r\n        Animation <TiTickOutline />\r\n      </button>\r\n    );\r\n    if (this.state.animationState === false) {\r\n      animationStateChangerButton = (\r\n        <button\r\n          onClick={this.animationStateChangeHandler}\r\n          style={{\r\n            color: \"#fff\",\r\n            backgroundColor: \"#FF0000\",\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n            border: \"1px solid #fff\",\r\n          }}\r\n        >\r\n          Animation <ImCross />\r\n        </button>\r\n      );\r\n    }\r\n\r\n    if (this.state.phase === \"preMaze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button onClick={this.visualizeMazeGeneration}> Maze </button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    } else if (this.state.phase === \"Maze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button> Generating..</button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    } else if (this.state.phase === \"postMaze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button onClick={this.animateShortestPath}> Path </button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let actionContainer = <div></div>;\r\n    if (this.state.phase === \"preMaze\") {\r\n      actionContainer = (\r\n        <div className=\"title\">\r\n          <label htmlFor=\"heightSlider\">\r\n            {\" \"}\r\n            Height : {this.state.length.row}\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"row_length\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            name=\"heightSlider\"\r\n            onChange={this.lengthChangeHandler}\r\n            defaultValue={this.state.length.row}\r\n          ></input>\r\n\r\n          <label htmlFor=\"widthSlider\"> Width : {this.state.length.col}</label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"col_length\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            name=\"widthSlider\"\r\n            onChange={this.lengthChangeHandler}\r\n            defaultValue={this.state.length.col}\r\n          ></input>\r\n\r\n          <label htmlFor=\"speedSlider\"> Maze Generation Speed: </label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            defaultValue=\"10\"\r\n            name=\"speedSlider\"\r\n            id=\"mazeSpeedRange\"\r\n            onChange={this.speedChangeHandler}\r\n          />\r\n\r\n          <div className=\"startPointContainer\">\r\n            <label htmlFor=\"point\"> Start Point: </label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"start_row\"\r\n              min=\"0\"\r\n              max={this.state.length.row - 1}\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.start.row}\r\n            ></input>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"start_col\"\r\n              min=\"0\"\r\n              max={this.state.length.col - 1}\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.start.col}\r\n            ></input>\r\n          </div>\r\n\r\n          <div className=\"endPointContainer\">\r\n            <label htmlFor=\"point\"> End Point: </label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"end_row\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.finish.row}\r\n            ></input>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"end_col\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.finish.col}\r\n            ></input>\r\n          </div>\r\n          {animationStateChangerButton}\r\n\r\n          <p\r\n            style={{\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            {this.state.errorMessage}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionContainer = (\r\n        <div className=\"About\">\r\n          <h1 className=\"aboutHeading\">About Me</h1>\r\n          <p className=\"aboutDescription\">\r\n            As a child I always solved mazes which were on the newspapers and\r\n            also built them by hand on notebook pages, and when learning\r\n            programming I thought how mazes are created and with curiosity in\r\n            mind my interest in programming grew more.\r\n            <br />\r\n            And because of it i feel every one should be curious about the\r\n            things and how the happen. And at last : This program runs using a\r\n            simple DFSrecursive Algorithm, one can take it as a refrence point\r\n            and build using other algorithms.\r\n          </p>\r\n          <h3 className=\"aboutCreatorName\">-Suhaan Bhandary</h3>\r\n          <div className=\"aboutLinks\">\r\n            <a\r\n              href=\"https://www.youtube.com/channel/UCHfmmdKuRDmZ5EUzGdqI7-Q\"\r\n              target=\"blank\"\r\n              className=\"aboutYoutube\"\r\n            >\r\n              <GrYoutube />\r\n            </a>\r\n            <a\r\n              href=\"https://www.linkedin.com/in/suhaan-bhandary-5bb907205/\"\r\n              target=\"blank\"\r\n              className=\"aboutLinkedin\"\r\n            >\r\n              <FaLinkedin />\r\n            </a>\r\n            <a\r\n              href=\"https://github.com/Suhaan-Bhandary\"\r\n              target=\"blank\"\r\n              className=\"aboutGithub\"\r\n            >\r\n              <FaGithub />\r\n            </a>\r\n            <p className=\"aboutGmail\">\r\n              <SiGmail /> suhaanbhandary1@gmail.com\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"MazeGeneratorVisualizer\">\r\n        <div className=\"header\">\r\n          <h1 className=\"appName\">Maze Generator</h1>\r\n          {buttonContainer}\r\n        </div>\r\n\r\n        <div className=\"navigation\">\r\n          <ul>\r\n            <li>\r\n              <div>\r\n                <span className=\"icon\">\r\n                  <VscSettings />\r\n                </span>\r\n                {actionContainer}\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"toggle\" onClick={toggleMenu}>\r\n          <VscSettings />\r\n        </div>\r\n\r\n        <div className=\"mazeContainer\">\r\n          <table className=\"maze\" id=\"table\">\r\n            <tbody>\r\n              {this.state.grid.map((row, rowIndex) => {\r\n                return (\r\n                  <tr key={rowIndex}>\r\n                    {row.map((node, nodeIndex) => {\r\n                      const { isStart, isFinish } = node; //Extracting from the node\r\n                      return (\r\n                        <Node\r\n                          row={rowIndex}\r\n                          col={nodeIndex}\r\n                          key={rowIndex + \"-\" + nodeIndex}\r\n                          isStart={isStart}\r\n                          isFinish={isFinish}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Function to get grid initially and when changing.\r\nconst getGrid = (\r\n  row_length,\r\n  col_length,\r\n  start_row,\r\n  start_col,\r\n  finish_row,\r\n  finish_col\r\n) => {\r\n  const grid = [];\r\n  for (let row = 0; row < row_length; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < col_length; col++) {\r\n      currentRow.push(\r\n        createNode(col, row, start_row, start_col, finish_row, finish_col)\r\n      );\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, start_row, start_col, finish_row, finish_col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === start_row && col === start_col,\r\n    isFinish: row === finish_row && col === finish_col,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n\r\n    topWall: true,\r\n    rightWall: true,\r\n    bottomWall: true,\r\n    leftWall: true,\r\n  };\r\n};\r\n\r\nconst notCorrectProperty = (row_max_length, col_max_length) => {\r\n  if (\r\n    isNaN(parseInt(document.getElementById(\"start_row\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"start_col\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"end_row\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"end_col\").value))\r\n  )\r\n    return true;\r\n\r\n  if (\r\n    parseInt(document.getElementById(\"start_row\").value) > row_max_length ||\r\n    parseInt(document.getElementById(\"start_col\").value) > col_max_length\r\n  )\r\n    return true;\r\n  if (\r\n    parseInt(document.getElementById(\"start_row\").value) < 0 ||\r\n    parseInt(document.getElementById(\"start_col\").value) < 0\r\n  )\r\n    return true;\r\n\r\n  if (\r\n    parseInt(document.getElementById(\"end_row\").value) > row_max_length ||\r\n    parseInt(document.getElementById(\"end_col\").value) > col_max_length\r\n  )\r\n    return true;\r\n  if (\r\n    parseInt(document.getElementById(\"end_row\").value) < 0 ||\r\n    parseInt(document.getElementById(\"end_col\").value) < 0\r\n  )\r\n    return true;\r\n\r\n  return false;\r\n};\r\n\r\nconst toggleMenu = () => {\r\n  let navigation = document.querySelector(\".navigation\");\r\n  navigation.classList.toggle(\"active\");\r\n\r\n  let toggle = document.querySelector(\".toggle\");\r\n  toggle.classList.toggle(\"active\");\r\n};\r\n\r\n// We export pdf from here.\r\nconst exportPdf = () => {\r\n  // We are storing the element from its id.\r\n  const element = document.querySelector(\".maze\");\r\n\r\n  // Changing the border.\r\n  element.style.border = \"1px solid black\";\r\n\r\n  // This is to remove class revisitedNode as it was causing problem for html2canvas.\r\n  var table = document.getElementById(\"table\"); // Get the table\r\n  for (var i = 0, row; (row = table.rows[i]); i++) {\r\n    for (var j = 0, cell; (cell = row.cells[j]); j++) {\r\n      cell.classList.remove(\"RevisitedNode\");\r\n    }\r\n  }\r\n\r\n  // html2canvas catures a screenshot or a picture and by using then we execute the function.\r\n  html2canvas(element).then((canvas) => {\r\n    // document.getElementById(\"canvas\").appendChild(canvas); to test the canvas element.\r\n\r\n    const imgData = canvas.toDataURL(\"image/png\"); // Creating image or png.\r\n\r\n    const doc = new jspdf();\r\n\r\n    // doc.addImage(imgData,imgPositionX,imgPositionY,width,height);\r\n    const imgHeight = (canvas.height * 205) / canvas.width + 20;\r\n    doc.text(\"Maze Generator - Suhaan\", 50, 10);\r\n\r\n    doc.addImage(imgData, 2, 12, 205, imgHeight);\r\n    doc.save(\"maze.pdf\");\r\n  });\r\n\r\n  element.style.border = \"1px solid #fff\";\r\n};\r\n","import './App.css';\nimport MazeGeneratorVisualizer from \"./MazeGeneratorVisualizer/MazeGeneratorVisualizer.jsx\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MazeGeneratorVisualizer></MazeGeneratorVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}